name: CI/CD Pipeline

on: 
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1  
  ECR_REPOSITORY: my-ecr-repo
  EKS_CLUSTER: my-eks-cluster

jobs:

  sca:
    name: SCA Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Run SCA scan
      uses: anchore/scan-action@v3
      
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r pythonapp/requirements.txt
    - name: Build
      run: |
        python pythonapp/setup.py sdist bdist_wheel
        
  artifactscan:
    name: Artifact Scan  
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist
    - name: Scan artifacts
      uses: anchore/scan-action@v3
      with:
        path: dist
        fail-build: false  
        
  sast:
    name: SAST Scan
    needs: build  
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Run SAST scan
      uses: anchore/scan-action@v3
      with:
        path: "."
        fail-build: false
        
  dast:
    name: DAST Scan 
    needs: deploy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Run OWASP ZAP baseline scan
      uses: zaproxy/action-baseline@v0.4.0
      with:
        target: 'http://<deployment-url>' 

  deploy:
    name: Deploy
    needs: [build, sast]
    runs-on: ubuntu-latest
    steps:
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      
    - name: Deploy to EKS
      run: |
        aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }}
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        
    - name: Export kubeconfig
      run: |  
        mkdir -p $HOME/.kube
        sudo cp -i /etc/rancher/k3s/k3s.yaml $HOME/.kube/config
        kubectl config view --raw > kubeconfig.yaml
        
    - name: Upload kubeconfig file
      uses: actions/upload-artifact@v3
      with:
        name: kubeconfig
        path: kubeconfig.yaml  

    - name: Save kubeconfig as a secret
      run: |
        kubectl create secret generic kubeconfig --from-file=kubeconfig.yaml