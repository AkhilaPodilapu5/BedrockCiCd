name: CI/CD Pipeline

on:
  workflow_dispatch:

jobs:

  sca:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: anchore/scan-action@v3
        with:
          image: "docker.io/anchore/anchore-engine:latest"
          fail-build: false

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v4
        with:
          python-version: '3.7'
      - run: pip install -r pythonapp/requirements.txt
      - run: python pythonapp/setup.py install
      - run: python -m pytest

  artifactscan:  
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: anchore/scan-action@v3
        with:
          image: "docker.io/anchore/anchore-engine:latest"
          fail-build: false

  sast:
    needs: build  
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: anchore/scan-action@v3
        with:
          path: "."
          fail-build: false

  dast:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: DAST Scan
        uses: anchore/scan-action@v3
        with:
          image: "docker.io/anchore/anchore-engine:latest"
          fail-build: false
          severity-cutoff: high
          acs-report-enable: true

  deploy:
    needs: [build, sast]
    runs-on: ubuntu-latest
    steps:

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: my-ecr-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      
      - name: Save Kubernetes context
        run: |
          kubectl config view --raw > kubeconfig.yaml
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig.yaml

      - name: Download kubeconfig
        uses: actions/download-artifact@v3
        with:
          name: kubeconfig
          path: .kube/config

      - name: Deploy to EKS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: my-ecr-repo
          IMAGE_TAG: ${{ github.sha }}  
        run: |
          kubectl set image deployment/my-deployment my-container=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG