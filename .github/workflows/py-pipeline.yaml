name: CI/CD Pipeline

on: 
  workflow_dispatch:

env:
  AWS_REGION: us-east-1  
  ECR_REPOSITORY: my-ecr-repo
  EKS_CLUSTER: my-eks-cluster

jobs:

  sca:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: anchore/scan-action@v3
        with:
          image: "myimage:latest"
          fail-build: false

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.7'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r pythonapp/requirements.txt
      - name: Build
        run: |
          python pythonapp/build.py
          docker build -t myimage . 
          
  artifactscan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: anchore/scan-action@v3
        with:
          image: "myimage:latest"
          fail-build: false
          
  sast:
    needs: build    
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: anchore/scan-action@v3
        with:
          path: "."
          fail-build: false
          
  deploy:
    needs: [sca, artifactscan, sast]
    runs-on: ubuntu-latest
    steps:
    
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ env.TASK_DEFINITION }}
          service: ${{ env.SERVICE }}
          cluster: ${{ env.EKS_CLUSTER }}
          wait-for-service-stability: true