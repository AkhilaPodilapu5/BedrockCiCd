name: CI/CD Pipeline

on:
  workflow_dispatch:

env:
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY: my-ecr-repo
  IMAGE_TAG: ${{ github.sha }}
  CLUSTER_NAME: my-eks-cluster
  AWS_REGION: us-west-2

jobs:

  sca:
    name: SCA
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run SCA scan
        uses: anchore/scan-action@v3
        with:
          image: "myimage:latest"
          acs-report-enable: true

  build:
    name: Build
    needs: sca
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r pythonapp/requirements.txt
      - name: Build
        run: |
          python pythonapp/build.py
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  artifactscan:
    name: Artifact Scan
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: my-artifact
        path: .

    - name: Scan artifact
      uses: anchore/scan-action@v3
      with:
        image: "my-artifact:latest"
        acs-report-enable: true

  sast:
    name: SAST
    needs: artifactscan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      
    - name: Run SAST
      uses: anchore/scan-action@v3
      with:
        image-reference: "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
        severity-cutoff: high
        acs-report-enable: true

  deploy:
    name: Deploy
    needs: sast
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Save Kubernetes cluster context
        run: |
          aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name ${{ env.CLUSTER_NAME }}
          kubectl config view --raw > kubeconfig.yaml
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig.yaml

      - name: Upload kubeconfig to artifact
        uses: actions/upload-artifact@v3
        with:
          name: kubeconfig
          path: kubeconfig.yaml

      - name: Download kubeconfig
        uses: actions/download-artifact@v3
        with:
          name: kubeconfig
          path: .
          
      - name: Deploy to EKS
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }} 
          KUBECONFIG: '/github/workspace/kubeconfig.yaml'
        run: |
          kubectl apply -f k8s
          kubectl set image deployment/my-deployment my-container=$REGISTRY/$REPOSITORY:$IMAGE_TAG
          kubectl rollout status deployment my-deployment

  dast:
    name: DAST Scan
    needs: deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Run DAST scan
      uses: anchore/scan-action@v3
      with:
        image: "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
        severity-cutoff: high
        acs-report-enable: true
        dast-config: dast.yaml
